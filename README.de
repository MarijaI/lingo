= Lingo - Das flexible automatische Indexierungssystem

Lingo ist ein freies Indexierungssystem für Forschung und Lehre. Die
wesentlichen Funktionen von Lingo sind

* Grundformidentifizierung bzw. -reduzierung über Wörterbücher und einfache
  Suffixlisten
* algorithmische Kompositumzerlegung
* wörterbuchbasierte Relationierung und Mehrworterkennung
* generische Mehrwort- bzw. Sequenzerkennung auf Basis von Wortklassenfolgen


== Einführung

Sollen Texte einer linguistischen Analyse unterzogen werden, so kann man mit
Lingo alles bewerkstelligen, was das Herz begehrt. Lingo ist ein System, das
es erlaubt, einzelne Bausteine mit begrenzter Funktion zu einem Netzwerk mit
unbegrenzter Funktion zusammenzubauen. Gebaut wird dieses Netzwerk für Lingo
in Konfigurationsdateien.

Ein kleines Beispiel:

  meeting:
    protocol: '$(status)'
    attendees:
      - textreader: { files: 'README.de' }
      - debugger:   { eval: 'true', ceval: 'cmd!="EOL"', prompt: '<debug>: ' }

Lingo wird angewiesen, zwei Attendees (Teilnehmer) einzuladen. Und Lingo möchte,
dass die beiden miteinander sprechen, daher der Name Lingo (= die Fachsprache).

Der erste Teilnehmer ist der +textreader+. Er kann Dateien lesen und anderen
Teilnehmern den Inhalt mitteilen. Dazu wird im +textreader+ ein Ausgabekanal
erzeugt. Alles, was der +textreader+ zu sagen hat, wird über diesen Kanal
geschleust. Das war's fast für den +textreader+. Der tut jetzt erst einmal
nichts, bis Lingo den ersten Teilnehmer auffordern wird, zu reden. Dann öffnet
der +textreader+ die Datei README.de (<tt>files</tt>-Parameter) und plappert
den Inhalt über den Ausgabekanal in die Welt hinaus.

Der zweite Teilnehmer +debugger+ macht nichts anderes, als alles, was über
seinen Eingabekanal herein kommt, auf der Konsole auszugeben. Schreibt man die
obige Lingo-Konfiguration in die Datei readme.cfg und ruft anschließend
<tt>lingo -c readme</tt> auf, so schaut das Ergebnis dieser ersten
Lingo-Konfiguration in etwa so aus:

  <debug>:  *FILE('README.de')
  <debug>:  "= Lingo - ..."
  ...
  <debug>:  "Sollen Texte einer linguistischen Analyse unterzogen werden, so kann man mit"
  <debug>:  "Lingo alles bewerkstelligen, was das Herz begehrt. Lingo ist ein System, das"
  ...
  <debug>:  *EOF('README.de')

Wie wir sehen, gibt es Zeilen mit Sternchen (*) und Zeilen ohne. Und das ist
auch gut so! Lingo unterscheidet nämlich zwischen Kommando und Daten. Der
+textreader+ hat nicht nur den Inhalt der Datei gelesen, sondern auch
zusätzlich über die Kommandos mitgeteilt, wann welche Datei anfängt und wann
sie zu Ende ist. Dies kann (und wird) eine wichtige Information für andere
Teilnehmer werden, die später hinzukommen.

So, damit ist zu Lingo eigentlich alles gesagt :o)

Vielleicht noch eine kleine Übersicht über mögliche Teilnehmer, die man zur
Lösung seines speziellen Problems heranziehen kann (für weitere Informationen
sei auf die jeweilige Dokumentation des Teilnehmers verwiesen):

<tt>textreader</tt>::      Liest Dateien und gibt deren Inhalt zeilenweise in
                           die Kanäle.
<tt>tokenizer</tt>::       Zerlegt Zeilen in definierte Zeichenketten der Klasse
                           Token.
<tt>abbreviator</tt>::     Identifiziert Abkürzungen und erzeugt die Langform,
                           so sie lexikalisiert ist.
<tt>wordsearcher</tt>::    Macht aus Token Objekte der Klasse Word. Ums richtig
                           zu machen schaut er dabei noch in Wörterbücher,
                           versucht Flexionen zu berücksichtigen und wenn alles
                           nichts hilft, testet er auch noch auf Komposita.
<tt>decomposer</tt>::      Untersucht für alle vom +wordsearcher+ nicht
                           erkannten Zeichenketten, ob es sich um Komposita
                           handelt.
<tt>synonymer</tt>::       Erweitert Objekte der Klasse Word um Synonyme, die
                           zu deren Grundform gefunden werden.
<tt>noneword_filter</tt>:: Filtert alles raus und gibt nur unbekannte Wörter
                           weiter.
<tt>vector_filter</tt>::   Filtert alles raus und gibt nur die Zeichenketten
                           weiter, die für die Indexierung als Vektor zu
                           gebrauchen sind.
<tt>textwriter</tt>::      Gibt alles, was er bekommt, in eine Datei aus.
<tt>debugger</tt>::        Zeigt alles zur Fehleranalyse an.
<tt>variator</tt>::        Versucht Fehler zu beheben, die z.B. durch das
                           Einscannen von Texten entstehen können.
<tt>multiworder</tt>::     Erkennt Mehrwortgruppen (Phrasen), falls sie
                           lexikalisiert sind.
<tt>sequencer</tt>::       Identifiziert Wortsequenzen anhand von Regeln.

Weiterhin kann für den Einstieg nicht schaden, einen Blick in die
Konfigurationen <tt>lingo.cfg</tt> und <tt>de.lang</tt> zu werfen.


== Credits

Lingo basiert auf einer gemeinschaftlichen Entwicklung von Klaus Lepsky
und John Vorhauer.

=== Entwickler

* John Vorhauer <mailto:lingo@vorhauer.de>
* Jens Wille <mailto:jens.wille@uni-koeln.de>

=== Mitwirkende

* Klaus Lepsky <mailto:klaus@lepsky.de>
* Jan-Helge Jacobs <mailto:plancton@web.de>
* Thomas Müller <mailto:thomas.mueller@fh-koeln.de>
