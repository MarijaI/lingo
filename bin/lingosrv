#! /usr/bin/env ruby

#--
###############################################################################
#                                                                             #
# Lingo -- A full-featured automatic indexing system                          #
#                                                                             #
# Copyright (C) 2005-2007 John Vorhauer                                       #
# Copyright (C) 2007-2012 John Vorhauer, Jens Wille                           #
#                                                                             #
# Lingo is free software; you can redistribute it and/or modify it under the  #
# terms of the GNU Affero General Public License as published by the Free     #
# Software Foundation; either version 3 of the License, or (at your option)   #
# any later version.                                                          #
#                                                                             #
# Lingo is distributed in the hope that it will be useful, but WITHOUT ANY    #
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS   #
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for     #
# more details.                                                               #
#                                                                             #
# You should have received a copy of the GNU Affero General Public License    #
# along with Lingo. If not, see <http://www.gnu.org/licenses/>.               #
#                                                                             #
###############################################################################
#++

require 'sinatra'
require 'lingo'
require 'json'

LINGO = Lingo::Call.new((i = ARGV.index('--')) ? ARGV[i + 1 .. -1] : []).call
abort 'Something went wrong...' unless LINGO.is_a?(Lingo::Call)

c = LINGO.config.get('meeting/attendees', 'vector_filter', 'src')
SRC_SEP = c == true ? Lingo::Attendee::VectorFilter::DEFAULT_SRC_SEP : c

get('')   { doit }
get('/')  { doit }
post('/') { doit }

def doit
  str = params[:str] and res = LINGO.talk(str) or return

  res = res.inject(Hash.new { |h, k| h[k] = [] }) { |h, s|
    a, b = s.split(SRC_SEP, 2); h[b] << a; h
  } if SRC_SEP

  content_type :json
  { str => res }.to_json
end

Sinatra::Application.run! unless $0 == __FILE__
