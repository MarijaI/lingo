var search_data = {"index":{"searchIndex":["agendaitem","array","attendee","abbreviator","debugger","decomposer","dehyphenizer","formatter","helper","multiworder","noneword_filter","objectfilter","sequencer","synonymer","textreader","pdffilter","textwriter","tokenizer","variator","vector_filter","wordsearcher","bufferedattendee","cachable","compositum","crypter","dbmfile","dictionary","diff","lcs","balancedcallbacks","block","change","changetypetests","contextchange","contextdiffcallbacks","defaultcallbacks","diffcallbacks","hunk","ldiff","sdiffcallbacks","sequencecallbacks","file","grammar","io","lexical","lexicalhash","lingo","version","lingoconfig","meeting","object","pathname","reportable","showpercent","string","stringa","token","txt2dbmconverter","txtfile","txtfile_keyvalue","txtfile_multikey","txtfile_multivalue","txtfile_singleword","txtfile_wordclass","word","wordsequence","<<()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","==()","==()","==()","lcs()","[]()","[]()","[]()","[]=()","[]=()","__diff_direction()","__inverse_vector()","__lcs()","__normalize_patchset()","__position_hash()","__replace_next_larger()","_get()","_lingo_original_each_line()","_lingo_original_open()","_set()","add()","add_nonempty_hunk()","add_subscriber()","adding?()","attr()","attrs()","change()","change()","change()","change()","change()","changed?()","check_multiword_key()","cleanup()","clear()","close()","close()","close()","close()","close!()","closed?()","compo_form()","context_diff()","context_range()","control()","control()","control()","control()","control()","control()","control()","control()","control()","control()","control()","control()","control()","control()","control()","convert()","convert_line()","convert_line()","convert_line()","convert_line()","convert_line()","create_and_forward_multiword()","create_path()","crypt()","decode()","deferred_insert()","deletecmd()","deleting?()","diff()","diff()","diff()","diff_size()","digest()","discard_a()","discard_a()","discard_a()","discard_a()","discard_a()","discard_a()","discard_b()","discard_b()","discard_b()","discard_b()","discard_b()","discard_b()","downcase()","each()","each_line()","each_old()","ed_diff()","encode()","encode!()","eql?()","file_type()","filename()","filename()","filter()","filter()","filter_html()","filter_pdf()","find_compositum()","find_synonyms()","find_word()","finish()","finished_a?()","finished_b?()","flush_lir_buffer()","forward()","forward_buffer()","forward_number_of_token()","forward_number_of_token()","from_a()","from_a()","from_x()","get()","get_array()","get_class()","get_key()","has_key?()","hash()","hit?()","inc()","inc()","infix_lexicals()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init()","init_cachable()","init_reportable()","inspect()","inspect()","inspect()","invite()","is_valid?()","key_to_nodes()","lcs()","lexicals()","lexicals=()","listen()","load_yaml_file()","match()","match()","match()","match()","match()","min_part_size()","move_to_next_line_and_show_text()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_lexical()","nodes_to_key()","norm()","number_of_valid_tokens_in_buffer()","number_of_valid_tokens_in_buffer()","old_diff()","old_downcase()","old_split()","op()","open()","open()","open()","overlaps?()","parse_cmdline()","parts()","patch()","patch()","patch!()","patch!()","patch_keys()","permute_compositum()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process_buffer()","process_buffer()","process_buffer()","process_buffer()","process_buffer()","process_buffer?()","process_buffer?()","process_buffer?()","process_buffer?()","process_buffer?()","report()","report()","report()","report_dictionary()","report_grammar()","report_prefix()","reset()","retrieve()","scan()","sdiff()","sdiff()","select()","select_with_infix()","select_with_suffix()","sendvector()","sequences()","set()","set()","set_encoding()","set_source_file()","set_spacing_next_line_show_text()","show()","show?()","show_text()","show_text_with_positioning()","simplify()","size()","sort_result_len()","split()","spool()","start()","start()","stdin?()","stdout?()","stop()","store()","suffix_lexicals()","super_show_text()","talk()","test_compositum()","to_a()","to_a()","to_a()","to_a()","to_h()","to_s()","to_s()","to_s()","to_s()","to_s()","to_str()","to_x()","tokenize()","traverse_balanced()","traverse_balanced()","traverse_sequences()","traverse_sequences()","unchanged?()","unified_diff()","unified_range()","unknown?()","unpatch()","unpatch!()","unpatch!()","unshift()","uptodate?()","usage()","variate()","copying","changelog","readme"],"longSearchIndex":["agendaitem","array","attendee","attendee::abbreviator","attendee::debugger","attendee::decomposer","attendee::dehyphenizer","attendee::formatter","attendee::helper","attendee::multiworder","attendee::noneword_filter","attendee::objectfilter","attendee::sequencer","attendee::synonymer","attendee::textreader","attendee::textreader::pdffilter","attendee::textwriter","attendee::tokenizer","attendee::variator","attendee::vector_filter","attendee::wordsearcher","bufferedattendee","cachable","compositum","crypter","dbmfile","dictionary","diff","diff::lcs","diff::lcs::balancedcallbacks","diff::lcs::block","diff::lcs::change","diff::lcs::changetypetests","diff::lcs::contextchange","diff::lcs::contextdiffcallbacks","diff::lcs::defaultcallbacks","diff::lcs::diffcallbacks","diff::lcs::hunk","diff::lcs::ldiff","diff::lcs::sdiffcallbacks","diff::lcs::sequencecallbacks","file","grammar","io","lexical","lexicalhash","lingo","lingo::version","lingoconfig","meeting","object","pathname","reportable","showpercent","string","stringa","token","txt2dbmconverter","txtfile","txtfile_keyvalue","txtfile_multikey","txtfile_multivalue","txtfile_singleword","txtfile_wordclass","word","wordsequence","word#<<()","agendaitem#<=>()","diff::lcs::change#<=>()","diff::lcs::contextchange#<=>()","lexical#<=>()","stringa#<=>()","word#<=>()","diff::lcs::change#==()","diff::lcs::contextchange#==()","stringa#==()","diff::lcs::lcs()","dbmfile#[]()","lexicalhash#[]()","lingoconfig#[]()","dbmfile#[]=()","lingoconfig#[]=()","diff::lcs::__diff_direction()","diff::lcs::__inverse_vector()","diff::lcs::__lcs()","diff::lcs::__normalize_patchset()","diff::lcs::__position_hash()","diff::lcs::__replace_next_larger()","dbmfile#_get()","pathname#_lingo_original_each_line()","file::_lingo_original_open()","dbmfile#_set()","reportable#add()","diff::lcs::diffcallbacks#add_nonempty_hunk()","attendee#add_subscriber()","diff::lcs::changetypetests#adding?()","string#attr()","word#attrs()","diff::lcs::contextdiffcallbacks#change()","diff::lcs::defaultcallbacks::change()","diff::lcs::defaultcallbacks::change()","diff::lcs::defaultcallbacks::change()","diff::lcs::sdiffcallbacks#change()","diff::lcs::changetypetests#changed?()","attendee::multiworder#check_multiword_key()","meeting#cleanup()","dbmfile#clear()","dbmfile#close()","dictionary#close()","grammar#close()","lexicalhash#close()","dictionary::close!()","dbmfile#closed?()","word#compo_form()","diff::lcs::hunk#context_diff()","diff::lcs::hunk#context_range()","attendee::abbreviator#control()","attendee::debugger#control()","attendee::decomposer#control()","attendee::dehyphenizer#control()","attendee::helper#control()","attendee::multiworder#control()","attendee::noneword_filter#control()","attendee::sequencer#control()","attendee::synonymer#control()","attendee::textreader#control()","attendee::textwriter#control()","attendee::tokenizer#control()","attendee::variator#control()","attendee::vector_filter#control()","attendee::wordsearcher#control()","txt2dbmconverter#convert()","txtfile_keyvalue#convert_line()","txtfile_multikey#convert_line()","txtfile_multivalue#convert_line()","txtfile_singleword#convert_line()","txtfile_wordclass#convert_line()","attendee::multiworder#create_and_forward_multiword()","pathname#create_path()","crypter#crypt()","crypter#decode()","bufferedattendee#deferred_insert()","attendee#deletecmd()","diff::lcs::changetypetests#deleting?()","diff::lcs::diff()","diff::lcs#diff()","diff::lcs::hunk#diff()","diff::lcs::block#diff_size()","crypter#digest()","diff::lcs::contextdiffcallbacks#discard_a()","diff::lcs::defaultcallbacks::discard_a()","diff::lcs::defaultcallbacks::discard_a()","diff::lcs::defaultcallbacks::discard_a()","diff::lcs::diffcallbacks#discard_a()","diff::lcs::sdiffcallbacks#discard_a()","diff::lcs::contextdiffcallbacks#discard_b()","diff::lcs::defaultcallbacks::discard_b()","diff::lcs::defaultcallbacks::discard_b()","diff::lcs::defaultcallbacks::discard_b()","diff::lcs::diffcallbacks#discard_b()","diff::lcs::sdiffcallbacks#discard_b()","string#downcase()","txtfile#each()","pathname#each_line()","diff::lcs::hunk#each_old()","diff::lcs::hunk#ed_diff()","crypter#encode()","string#encode!()","stringa#eql?()","attendee::textreader#file_type()","dbmfile::filename()","txtfile::filename()","attendee::textreader#filter()","attendee::textreader::pdffilter::filter()","attendee::textreader#filter_html()","attendee::textreader#filter_pdf()","grammar#find_compositum()","dictionary#find_synonyms()","dictionary#find_word()","diff::lcs::diffcallbacks#finish()","diff::lcs::changetypetests#finished_a?()","diff::lcs::changetypetests#finished_b?()","attendee::textwriter#flush_lir_buffer()","attendee#forward()","bufferedattendee#forward_buffer()","attendee::dehyphenizer#forward_number_of_token()","attendee::multiworder#forward_number_of_token()","diff::lcs::change::from_a()","diff::lcs::contextchange::from_a()","string#from_x()","reportable#get()","attendee#get_array()","word#get_class()","attendee#get_key()","attendee#has_key?()","stringa#hash()","cachable#hit?()","reportable#inc()","showpercent#inc()","dictionary#infix_lexicals()","attendee::abbreviator#init()","attendee::debugger#init()","attendee::decomposer#init()","attendee::dehyphenizer#init()","attendee::formatter#init()","attendee::helper#init()","attendee::multiworder#init()","attendee::noneword_filter#init()","attendee::objectfilter#init()","attendee::sequencer#init()","attendee::synonymer#init()","attendee::textreader#init()","attendee::textwriter#init()","attendee::tokenizer#init()","attendee::variator#init()","attendee::vector_filter#init()","attendee::wordsearcher#init()","cachable#init_cachable()","reportable#init_reportable()","agendaitem#inspect()","diff::lcs::contextchange#inspect()","stringa#inspect()","meeting#invite()","grammar#is_valid?()","lingoconfig#key_to_nodes()","diff::lcs#lcs()","word#lexicals()","word#lexicals=()","attendee#listen()","lingoconfig#load_yaml_file()","diff::lcs::defaultcallbacks::match()","diff::lcs::defaultcallbacks::match()","diff::lcs::defaultcallbacks::match()","diff::lcs::diffcallbacks#match()","diff::lcs::sdiffcallbacks#match()","word#min_part_size()","attendee::textreader::pdffilter#move_to_next_line_and_show_text()","agendaitem::new()","attendee::new()","attendee::textreader::pdffilter::new()","bufferedattendee::new()","dbmfile::new()","dictionary::new()","diff::lcs::block::new()","diff::lcs::change::new()","diff::lcs::contextchange::new()","diff::lcs::diffcallbacks::new()","diff::lcs::hunk::new()","diff::lcs::sdiffcallbacks::new()","grammar::new()","lexicalhash::new()","lingoconfig::new()","meeting::new()","showpercent::new()","stringa::new()","txt2dbmconverter::new()","txtfile::new()","txtfile_keyvalue::new()","txtfile_multikey::new()","txtfile_multivalue::new()","txtfile_singleword::new()","txtfile_wordclass::new()","word::new()","wordsequence::new()","word::new_lexical()","lingoconfig#nodes_to_key()","word#norm()","attendee::dehyphenizer#number_of_valid_tokens_in_buffer()","attendee::multiworder#number_of_valid_tokens_in_buffer()","diff::lcs::hunk#old_diff()","string#old_downcase()","string#old_split()","diff::lcs::block#op()","dbmfile#open()","dbmfile::open()","file::open()","diff::lcs::hunk#overlaps?()","lingoconfig#parse_cmdline()","word#parts()","diff::lcs::patch()","diff::lcs#patch()","diff::lcs#patch!()","diff::lcs::patch!()","lingoconfig#patch_keys()","grammar#permute_compositum()","attendee::debugger#process()","attendee::decomposer#process()","attendee::formatter#process()","attendee::helper#process()","attendee::noneword_filter#process()","attendee::objectfilter#process()","attendee::synonymer#process()","attendee::textwriter#process()","attendee::tokenizer#process()","attendee::variator#process()","attendee::vector_filter#process()","attendee::wordsearcher#process()","bufferedattendee#process()","attendee::abbreviator#process_buffer()","attendee::dehyphenizer#process_buffer()","attendee::multiworder#process_buffer()","attendee::sequencer#process_buffer()","bufferedattendee#process_buffer()","attendee::abbreviator#process_buffer?()","attendee::dehyphenizer#process_buffer?()","attendee::multiworder#process_buffer?()","attendee::sequencer#process_buffer?()","bufferedattendee#process_buffer?()","dictionary#report()","grammar#report()","reportable#report()","dictionary#report_dictionary()","grammar#report_grammar()","reportable#report_prefix()","meeting#reset()","cachable#retrieve()","wordsequence#scan()","diff::lcs#sdiff()","diff::lcs::sdiff()","dictionary#select()","dictionary#select_with_infix()","dictionary#select_with_suffix()","attendee::vector_filter#sendvector()","attendee::sequencer#sequences()","reportable#set()","showpercent#set()","io#set_encoding()","dbmfile#set_source_file()","attendee::textreader::pdffilter#set_spacing_next_line_show_text()","showpercent#show()","showpercent#show?()","attendee::textreader::pdffilter#show_text()","attendee::textreader::pdffilter#show_text_with_positioning()","diff::lcs::contextchange::simplify()","txtfile#size()","attendee::multiworder#sort_result_len()","string#split()","attendee::textreader#spool()","meeting#start()","showpercent#start()","attendee::textreader#stdin?()","attendee::textwriter#stdout?()","showpercent#stop()","cachable#store()","dictionary#suffix_lexicals()","attendee::textreader::pdffilter#super_show_text()","attendee#talk()","grammar#test_compositum()","diff::lcs::change#to_a()","diff::lcs::contextchange#to_a()","lexical#to_a()","lingo::version::to_a()","dbmfile#to_h()","lexical#to_s()","lingo::version::to_s()","stringa#to_s()","token#to_s()","word#to_s()","lexical#to_str()","string#to_x()","attendee::tokenizer#tokenize()","diff::lcs#traverse_balanced()","diff::lcs::traverse_balanced()","diff::lcs#traverse_sequences()","diff::lcs::traverse_sequences()","diff::lcs::changetypetests#unchanged?()","diff::lcs::hunk#unified_diff()","diff::lcs::hunk#unified_range()","word#unknown?()","diff::lcs#unpatch()","diff::lcs#unpatch!()","diff::lcs::unpatch!()","diff::lcs::hunk#unshift()","dbmfile#uptodate?()","lingoconfig#usage()","attendee::variator#variate()","","",""],"info":[["AgendaItem","","AgendaItem.html","",""],["Array","","Array.html","",""],["Attendee","","Attendee.html","",""],["Attendee::Abbreviator","","Attendee/Abbreviator.html","","<p>Abbreviator\n<p>Die Erkennung von Abkürzungen kann auf vielfältige Weise erfolgen. In jedem\nFall  sollte eine …\n"],["Attendee::Debugger","","Attendee/Debugger.html","","<p>Debugger\n<p>Die Attendees von Lingo übergeben Daten über ihre Kommunikationskanäle und\nentweder kommt bei …\n"],["Attendee::Decomposer","","Attendee/Decomposer.html","","<p>Decomposer\n<p>Komposita, also zusammengesetzte Wörter, sind eine Spezialität der\ndeutschen Sprache  (z.B. …\n"],["Attendee::Dehyphenizer","","Attendee/Dehyphenizer.html","","<p>Dehyphenizer\n<p>Der Dehyphenizer … muss noch dokumentiert werden\n<p>Mögliche Verlinkung\n"],["Attendee::Formatter","","Attendee/Formatter.html","",""],["Attendee::Helper","","Attendee/Helper.html","","<p>Helper\n<p>Der Helper hilft bei automatischen Testreihen vor Releasefreigabe von\nLingo.  Für den praktischen …\n"],["Attendee::Multiworder","","Attendee/Multiworder.html","","<p>Multiworder\n<p>Mit der bisher beschriebenen Vorgehensweise werden die durch den Tokenizer\nerkannten  Token …\n"],["Attendee::Noneword_filter","","Attendee/Noneword_filter.html","","<p>Noneword_filter\n<p>Der Noneword_filter ermöglicht es, alle nicht erkannten Wörter aus dem\nDatenstrom zu  …\n"],["Attendee::Objectfilter","","Attendee/Objectfilter.html","","<p>Objectfilter\n<p>Der Objectfilter ermöglicht es, beliebige Objekte aus dem Datenstrom\nherauszufiltern. Um …\n"],["Attendee::Sequencer","","Attendee/Sequencer.html","","<p>Sequencer\n<p>Der Sequencer ist von seiner Funktion her ähnlich dem Multiworder. Der\nMultiworder nutzt zur …\n"],["Attendee::Synonymer","","Attendee/Synonymer.html","","<p>Synonymer\n<p>Der Synonymer untersucht die von anderen Attendees ermittelten Grundformen\neines Wortes und …\n"],["Attendee::Textreader","","Attendee/Textreader.html","","<p>Textreader\n<p>Der Textreader ist eine klassische Datenquelle. Er liest eine oder mehrere\nDateien\n<p>und gibt …\n"],["Attendee::Textreader::PDFFilter","","Attendee/Textreader/PDFFilter.html","",""],["Attendee::Textwriter","","Attendee/Textwriter.html","","<p>Textwriter\n<p>Der Textwriter ermöglicht die Umleitung des Datenstroms in eine Textdatei.\nDabei werden Objekte …\n"],["Attendee::Tokenizer","","Attendee/Tokenizer.html","","<p>Tokenizer\n<p>Der Tokenizer zerlegt eine Textzeile in einzelne Token. Dies ist notwendig,\ndamit nachfolgende …\n"],["Attendee::Variator","","Attendee/Variator.html","","<p>Variator\n<p>Der Variator ermöglicht bei nicht erkannten Wörtern den listenbasierten \nAustausch einzelner …\n"],["Attendee::Vector_filter","","Attendee/Vector_filter.html","","<p>Vector_filter\n<p>Die Hauptaufgabe des Vector_filter ist die Erstellung eines\nDokumenten-Index-Vektor. Dabei …\n"],["Attendee::Wordsearcher","","Attendee/Wordsearcher.html","","<p>Wordsearcher\n<p>Der Wordsearcher ist das Herzstück von Lingo. Er macht die Hauptarbeit und\nversucht  alle …\n"],["BufferedAttendee","","BufferedAttendee.html","","<p>\n\n<pre>BufferedAttendee</pre>\n<p>\n"],["Cachable","","Cachable.html","","<p>Cachable\n<p>Das Modul Cachable ermöglicht das Verwerten von zwischengespeicherten\nErgebnisse für einen schnelleren …\n"],["Compositum","","Compositum.html","",""],["Crypter","","Crypter.html","","<p>Crypter ermöglicht die Ver- und Entschlüsselung von Wörterbüchern\n"],["DbmFile","","DbmFile.html","","<p>DbmFile\n<p>Die Klasse DbmFile stellt eine einheitliche Schnittstelle auf\nLingo-Datenbanken bereit. Die Identifizierung …\n"],["Dictionary","","Dictionary.html","",""],["Diff","","Diff.html","",""],["Diff::LCS","","Diff/LCS.html","","<p>Diff::LCS 1.1.2\n<p>Computes “intelligent” differences between two sequenced Enumerables. This\nis …\n"],["Diff::LCS::BalancedCallbacks","","Diff/LCS/DefaultCallbacks.html","","<p>This callback object implements the default set of callback events, which\nonly returns the event itself. …\n"],["Diff::LCS::Block","","Diff/LCS/Block.html","","<p>A block is an operation removing, adding, or changing a group of items.\nBasically, this is just a list …\n"],["Diff::LCS::Change","","Diff/LCS/Change.html","","<p>Represents a simplistic (non-contextual) change. Represents the removal or\naddition of an element from …\n"],["Diff::LCS::ChangeTypeTests","","Diff/LCS/ChangeTypeTests.html","","<p>Centralises the change test code in Diff::LCS::Change and\nDiff::LCS::ContextChange, since it’s the same …\n"],["Diff::LCS::ContextChange","","Diff/LCS/ContextChange.html","","<p>Represents a contextual change. Contains the position and values of the\nelements in the old and the new …\n"],["Diff::LCS::ContextDiffCallbacks","","Diff/LCS/ContextDiffCallbacks.html","","<p>This will produce a compound array of contextual diff change objects. Each\nelement in the #diffs array …\n"],["Diff::LCS::DefaultCallbacks","","Diff/LCS/DefaultCallbacks.html","","<p>This callback object implements the default set of callback events, which\nonly returns the event itself. …\n"],["Diff::LCS::DiffCallbacks","","Diff/LCS/DiffCallbacks.html","","<p>This will produce a compound array of simple diff change objects. Each\nelement in the #diffs array is …\n"],["Diff::LCS::Hunk","","Diff/LCS/Hunk.html","","<p>A Hunk is a group of Blocks which overlap because of the context\nsurrounding each block. (So if we’re …\n"],["Diff::LCS::Ldiff","","Diff/LCS/Ldiff.html","","<p>ldiff Usage\n\n<pre>ldiff [options] oldfile newfile</pre>\n<p>-c &mdash; Displays a context diff with 3 lines of context.\n"],["Diff::LCS::SDiffCallbacks","","Diff/LCS/SDiffCallbacks.html","","<p>This will produce a simple array of diff change objects. Each element in\nthe #diffs array is a single …\n"],["Diff::LCS::SequenceCallbacks","","Diff/LCS/DefaultCallbacks.html","","<p>This callback object implements the default set of callback events, which\nonly returns the event itself. …\n"],["File","","File.html","",""],["Grammar","","Grammar.html","","<p>Grammar\n<p>Die Klasse Grammar beinhaltet grammatikalische Spezialitäten einer Sprache.\nDerzeit findet die …\n"],["IO","","IO.html","",""],["Lexical","","Lexical.html","","<p>Die Klasse Lexical, abgeleitet von der Klasse StringA, stellt den Container\nfür eine Grundform eines …\n"],["LexicalHash","","LexicalHash.html","","<p>LexicalHash\n<p>Die Klasse LexicalHash ermöglicht den Zugriff auf die Lingodatenbanken. Im\nGegensatz zur  …\n"],["Lingo","","Lingo.html","",""],["Lingo::Version","","Lingo/Version.html","",""],["LingoConfig","","LingoConfig.html","","<p>LingoConfig will hold the complete comfiguration information, which will\ncontrol lingos processing flow. …\n"],["Meeting","","Meeting.html","",""],["Object","","Object.html","",""],["Pathname","","Pathname.html","",""],["Reportable","","Reportable.html","","<p>Reportable\n<p>Das Modul Reportable ermöglicht das setzen und hochzählen von statistischen\nWerten.\n"],["ShowPercent","","ShowPercent.html","","<p>ShowPercent ermöglicht die Fortschrittsanzeige beim konvertieren der\nWörterbücher\n"],["String","","String.html","","<p>Erweiterung der Klasse String.\n<p>Includes Diff::LCS into String.\n"],["StringA","","StringA.html","","<p>Die Klasse StringA ist die Basisklasse für weitere Klassen, die im Rahmen\nder  Objektstruktur eines  …\n"],["Token","","Token.html","","<p>Die Klasse Token, abgeleitet von der Klasse StringA, stellt den Container\nfür ein einzelnes Wort eines …\n"],["Txt2DbmConverter","","Txt2DbmConverter.html","","<p>Txt2DbConverter\n<p>Die Klasse Txt2DbConverter steuert die Konvertierung von\nWörterbuch-Quelldateien in Lingo- …\n"],["TxtFile","","TxtFile.html","","<p>TxtFile\n<p>Die Klasse TxtFile stellt eine einheitliche Schnittstelle auf die\nunterschiedlichen Formate von …\n"],["TxtFile_Keyvalue","","TxtFile_Keyvalue.html","","<p>TxtFile_Keyvalue\n<p>Abgeleitet von TxtFile behandelt die Klasse Dateien mit dem Format\n<code>KeyValue</code>. Eine Zeile …\n"],["TxtFile_Multikey","","TxtFile_Multikey.html","","<p>TxtFile_Multikey\n<p>Abgeleitet von TxtFile behandelt die Klasse Dateien mit dem Format\n<code>MultiKey</code>. Eine Zeile …\n"],["TxtFile_Multivalue","","TxtFile_Multivalue.html","","<p>TxtFile_Multivalue\n<p>Abgeleitet von TxtFile behandelt die Klasse Dateien mit dem Format\n<code>MultiValue</code>. Eine …\n"],["TxtFile_Singleword","","TxtFile_Singleword.html","","<p>TxtFile_Singleword\n<p>Abgeleitet von TxtFile behandelt die Klasse Dateien mit dem Format\n<code>SingleWord</code>. Eine …\n"],["TxtFile_Wordclass","","TxtFile_Wordclass.html","","<p>TxtFile_Wordclass\n<p>Abgeleitet von TxtFile behandelt die Klasse Dateien mit dem Format\n<code>WordClass</code>. Eine  …\n"],["Word","","Word.html","","<p>Die Klasse Word bündelt spezifische Eigenschaften eines Wortes mit den \ndazu notwendigen Methoden.\n"],["WordSequence","","WordSequence.html","","<p>WordSequence\n"],["<<","Word","Word.html#method-i-3C-3C","(other)",""],["<=>","AgendaItem","AgendaItem.html#method-i-3C-3D-3E","(other)",""],["<=>","Diff::LCS::Change","Diff/LCS/Change.html#method-i-3C-3D-3E","(other)",""],["<=>","Diff::LCS::ContextChange","Diff/LCS/ContextChange.html#method-i-3C-3D-3E","(other)",""],["<=>","Lexical","Lexical.html#method-i-3C-3D-3E","(other)",""],["<=>","StringA","StringA.html#method-i-3C-3D-3E","(other)",""],["<=>","Word","Word.html#method-i-3C-3D-3E","(other)",""],["==","Diff::LCS::Change","Diff/LCS/Change.html#method-i-3D-3D","(other)",""],["==","Diff::LCS::ContextChange","Diff/LCS/ContextChange.html#method-i-3D-3D","(other)",""],["==","StringA","StringA.html#method-i-3D-3D","(other)",""],["LCS","Diff::LCS","Diff/LCS.html#method-c-LCS","(seq1, seq2, &block)","<p>Given two sequenced Enumerables, LCS returns an Array containing their\nlongest common subsequences.\n\n<pre>lcs ...</pre>\n"],["[]","DbmFile","DbmFile.html#method-i-5B-5D","(key)",""],["[]","LexicalHash","LexicalHash.html#method-i-5B-5D","(ikey)",""],["[]","LingoConfig","LingoConfig.html#method-i-5B-5D","(key)",""],["[]=","DbmFile","DbmFile.html#method-i-5B-5D-3D","(key, val)",""],["[]=","LingoConfig","LingoConfig.html#method-i-5B-5D-3D","(key, value)",""],["__diff_direction","Diff::LCS","Diff/LCS.html#method-c-__diff_direction","(src, patchset, limit = nil)","<p>Examine the patchset and the source to see in which direction the patch\nshould be applied.\n<p>WARNING: By …\n"],["__inverse_vector","Diff::LCS","Diff/LCS.html#method-c-__inverse_vector","(a, vector)","<p>If <code>vector</code> maps the matching elements of another collection\nonto this Enumerable, compute the inverse …\n"],["__lcs","Diff::LCS","Diff/LCS.html#method-c-__lcs","(a, b)","<p>private Compute the longest common subsequence between the sequenced\nEnumerables <code>a</code> and <code>b</code>. The result …\n"],["__normalize_patchset","Diff::LCS","Diff/LCS.html#method-c-__normalize_patchset","(patchset)","<p>Normalize the patchset. A patchset is always a sequence of changes, but how\nthose changes are represented …\n"],["__position_hash","Diff::LCS","Diff/LCS.html#method-c-__position_hash","(enum, interval = 0 .. -1)","<p>Returns a hash mapping each element of an Enumerable to the set of\npositions it occupies in the Enumerable …\n"],["__replace_next_larger","Diff::LCS","Diff/LCS.html#method-c-__replace_next_larger","(enum, value, last_index = nil)","<p>Find the place at which <code>value</code> would normally be inserted into\nthe Enumerable. If that place is already …\n"],["_get","DbmFile","DbmFile.html#method-i-_get","(key)",""],["_lingo_original_each_line","Pathname","Pathname.html#method-i-_lingo_original_each_line","(*args, &block)",""],["_lingo_original_open","File","File.html#method-c-_lingo_original_open","(*args, &block)",""],["_set","DbmFile","DbmFile.html#method-i-_set","(key, val)",""],["add","Reportable","Reportable.html#method-i-add","(counter, value)",""],["add_nonempty_hunk","Diff::LCS::DiffCallbacks","Diff/LCS/DiffCallbacks.html#method-i-add_nonempty_hunk","()",""],["add_subscriber","Attendee","Attendee.html#method-i-add_subscriber","( subscriber )",""],["adding?","Diff::LCS::ChangeTypeTests","Diff/LCS/ChangeTypeTests.html#method-i-adding-3F","()",""],["attr","String","String.html#method-i-attr","()","<p>als patch für dictionary.select.sort.uniqual\n"],["attrs","Word","Word.html#method-i-attrs","(compound_parts = true)",""],["change","Diff::LCS::ContextDiffCallbacks","Diff/LCS/ContextDiffCallbacks.html#method-i-change","(event)",""],["change","Diff::LCS::DefaultCallbacks","Diff/LCS/DefaultCallbacks.html#method-c-change","(event)","<p>Called when both the old and new values have changed.\n"],["change","Diff::LCS::DefaultCallbacks","Diff/LCS/DefaultCallbacks.html#method-c-change","(event)","<p>Called when both the old and new values have changed.\n"],["change","Diff::LCS::DefaultCallbacks","Diff/LCS/DefaultCallbacks.html#method-c-change","(event)","<p>Called when both the old and new values have changed.\n"],["change","Diff::LCS::SDiffCallbacks","Diff/LCS/SDiffCallbacks.html#method-i-change","(event)",""],["changed?","Diff::LCS::ChangeTypeTests","Diff/LCS/ChangeTypeTests.html#method-i-changed-3F","()",""],["check_multiword_key","Attendee::Multiworder","Attendee/Multiworder.html#method-i-check_multiword_key","( len )","<p>Prüft einen definiert langen Schlüssel ab Position 0 im Buffer\n"],["cleanup","Meeting","Meeting.html#method-i-cleanup","()",""],["clear","DbmFile","DbmFile.html#method-i-clear","()",""],["close","DbmFile","DbmFile.html#method-i-close","()",""],["close","Dictionary","Dictionary.html#method-i-close","()",""],["close","Grammar","Grammar.html#method-i-close","()",""],["close","LexicalHash","LexicalHash.html#method-i-close","()",""],["close!","Dictionary","Dictionary.html#method-c-close-21","()",""],["closed?","DbmFile","DbmFile.html#method-i-closed-3F","()",""],["compo_form","Word","Word.html#method-i-compo_form","()",""],["context_diff","Diff::LCS::Hunk","Diff/LCS/Hunk.html#method-i-context_diff","()",""],["context_range","Diff::LCS::Hunk","Diff/LCS/Hunk.html#method-i-context_range","(mode)","<p>Generate a range of item numbers to print. Only print 1 number if the range\nhas only one item in it. …\n"],["control","Attendee::Abbreviator","Attendee/Abbreviator.html#method-i-control","(cmd, par)",""],["control","Attendee::Debugger","Attendee/Debugger.html#method-i-control","(cmd, par)",""],["control","Attendee::Decomposer","Attendee/Decomposer.html#method-i-control","(cmd, par)",""],["control","Attendee::Dehyphenizer","Attendee/Dehyphenizer.html#method-i-control","(cmd, par)",""],["control","Attendee::Helper","Attendee/Helper.html#method-i-control","(cmd, param)",""],["control","Attendee::Multiworder","Attendee/Multiworder.html#method-i-control","(cmd, par)",""],["control","Attendee::Noneword_filter","Attendee/Noneword_filter.html#method-i-control","(cmd, par)","<p>Control behandelt die Kommandos zum Öffnen und Schließen einer Datei.  Für\njede Datei wird ein neuer …\n"],["control","Attendee::Sequencer","Attendee/Sequencer.html#method-i-control","(cmd, par)",""],["control","Attendee::Synonymer","Attendee/Synonymer.html#method-i-control","(cmd, par)",""],["control","Attendee::Textreader","Attendee/Textreader.html#method-i-control","(cmd, param)",""],["control","Attendee::Textwriter","Attendee/Textwriter.html#method-i-control","(cmd, par)",""],["control","Attendee::Tokenizer","Attendee/Tokenizer.html#method-i-control","(cmd, param)",""],["control","Attendee::Variator","Attendee/Variator.html#method-i-control","(cmd, par)",""],["control","Attendee::Vector_filter","Attendee/Vector_filter.html#method-i-control","(cmd, par)",""],["control","Attendee::Wordsearcher","Attendee/Wordsearcher.html#method-i-control","(cmd, par)",""],["convert","Txt2DbmConverter","Txt2DbmConverter.html#method-i-convert","()",""],["convert_line","TxtFile_Keyvalue","TxtFile_Keyvalue.html#method-i-convert_line","(line, key, val)",""],["convert_line","TxtFile_Multikey","TxtFile_Multikey.html#method-i-convert_line","(line, key, val)",""],["convert_line","TxtFile_Multivalue","TxtFile_Multivalue.html#method-i-convert_line","(line, key, val)",""],["convert_line","TxtFile_Singleword","TxtFile_Singleword.html#method-i-convert_line","(line, key, val)",""],["convert_line","TxtFile_Wordclass","TxtFile_Wordclass.html#method-i-convert_line","(line, key, val)",""],["create_and_forward_multiword","Attendee::Multiworder","Attendee/Multiworder.html#method-i-create_and_forward_multiword","( len, lexicals )",""],["create_path","Pathname","Pathname.html#method-i-create_path","()",""],["crypt","Crypter","Crypter.html#method-i-crypt","(k, v)",""],["decode","Crypter","Crypter.html#method-i-decode","(key, val)",""],["deferred_insert","BufferedAttendee","BufferedAttendee.html#method-i-deferred_insert","(pos, obj)",""],["deleteCmd","Attendee","Attendee.html#method-i-deleteCmd","()",""],["deleting?","Diff::LCS::ChangeTypeTests","Diff/LCS/ChangeTypeTests.html#method-i-deleting-3F","()",""],["diff","Diff::LCS","Diff/LCS.html#method-c-diff","(seq1, seq2, callbacks = nil, &block)","<p>Diff::LCS.diff computes the smallest set of additions and deletions\nnecessary to turn the first sequence …\n"],["diff","Diff::LCS","Diff/LCS.html#method-i-diff","(other, callbacks = nil, &block)","<p>Returns the difference set between <code>self</code> and\n<code>other</code>. See Diff::LCS#diff.\n"],["diff","Diff::LCS::Hunk","Diff/LCS/Hunk.html#method-i-diff","(format)",""],["diff_size","Diff::LCS::Block","Diff/LCS/Block.html#method-i-diff_size","()",""],["digest","Crypter","Crypter.html#method-i-digest","(key)",""],["discard_a","Diff::LCS::ContextDiffCallbacks","Diff/LCS/ContextDiffCallbacks.html#method-i-discard_a","(event)",""],["discard_a","Diff::LCS::DefaultCallbacks","Diff/LCS/DefaultCallbacks.html#method-c-discard_a","(event)","<p>Called when the old value is discarded in favour of the new value.\n"],["discard_a","Diff::LCS::DefaultCallbacks","Diff/LCS/DefaultCallbacks.html#method-c-discard_a","(event)","<p>Called when the old value is discarded in favour of the new value.\n"],["discard_a","Diff::LCS::DefaultCallbacks","Diff/LCS/DefaultCallbacks.html#method-c-discard_a","(event)","<p>Called when the old value is discarded in favour of the new value.\n"],["discard_a","Diff::LCS::DiffCallbacks","Diff/LCS/DiffCallbacks.html#method-i-discard_a","(event)",""],["discard_a","Diff::LCS::SDiffCallbacks","Diff/LCS/SDiffCallbacks.html#method-i-discard_a","(event)",""],["discard_b","Diff::LCS::ContextDiffCallbacks","Diff/LCS/ContextDiffCallbacks.html#method-i-discard_b","(event)",""],["discard_b","Diff::LCS::DefaultCallbacks","Diff/LCS/DefaultCallbacks.html#method-c-discard_b","(event)","<p>Called when the new value is discarded in favour of the old value.\n"],["discard_b","Diff::LCS::DefaultCallbacks","Diff/LCS/DefaultCallbacks.html#method-c-discard_b","(event)","<p>Called when the new value is discarded in favour of the old value.\n"],["discard_b","Diff::LCS::DefaultCallbacks","Diff/LCS/DefaultCallbacks.html#method-c-discard_b","(event)","<p>Called when the new value is discarded in favour of the old value.\n"],["discard_b","Diff::LCS::DiffCallbacks","Diff/LCS/DiffCallbacks.html#method-i-discard_b","(event)",""],["discard_b","Diff::LCS::SDiffCallbacks","Diff/LCS/SDiffCallbacks.html#method-i-discard_b","(event)",""],["downcase","String","String.html#method-i-downcase","()",""],["each","TxtFile","TxtFile.html#method-i-each","()",""],["each_line","Pathname","Pathname.html#method-i-each_line","(*args, &block)",""],["each_old","Diff::LCS::Hunk","Diff/LCS/Hunk.html#method-i-each_old","(block)",""],["ed_diff","Diff::LCS::Hunk","Diff/LCS/Hunk.html#method-i-ed_diff","(format)",""],["encode","Crypter","Crypter.html#method-i-encode","(key, val)",""],["encode!","String","String.html#method-i-encode-21","(*args)",""],["eql?","StringA","StringA.html#method-i-eql-3F","(other)",""],["file_type","Attendee::Textreader","Attendee/Textreader.html#method-i-file_type","(filename, file)",""],["filename","DbmFile","DbmFile.html#method-c-filename","(id)","<p>Erzeugt den Dateinamen des DbmFiles anhang der Konfiguration\n"],["filename","TxtFile","TxtFile.html#method-c-filename","(id)",""],["filter","Attendee::Textreader","Attendee/Textreader.html#method-i-filter","(filename, &block)",""],["filter","Attendee::Textreader::PDFFilter","Attendee/Textreader/PDFFilter.html#method-c-filter","(file, &block)",""],["filter_html","Attendee::Textreader","Attendee/Textreader.html#method-i-filter_html","(file, xml = false)",""],["filter_pdf","Attendee::Textreader","Attendee/Textreader.html#method-i-filter_pdf","(file, &block)",""],["find_compositum","Grammar","Grammar.html#method-i-find_compositum","(string, level=1, has_tail=false)","<p>find_compositum(string) -&gt; word wenn level=1\n\n<pre>find_compositum(string) -&gt; [lexicals, stats] wenn level!=1</pre>\n"],["find_synonyms","Dictionary","Dictionary.html#method-i-find_synonyms","(obj)",""],["find_word","Dictionary","Dictionary.html#method-i-find_word","(string)","<p><em>dic</em>.find_word( <em>aString</em> ) -&gt; <em>aNewWord</em>\n<p>Erstellt aus dem String ein Wort und sucht nach diesem im Wörterbuch. …\n"],["finish","Diff::LCS::DiffCallbacks","Diff/LCS/DiffCallbacks.html#method-i-finish","()","<p>Finalizes the diff process. If an unprocessed hunk still exists, then it is\nappended to the diff list. …\n"],["finished_a?","Diff::LCS::ChangeTypeTests","Diff/LCS/ChangeTypeTests.html#method-i-finished_a-3F","()",""],["finished_b?","Diff::LCS::ChangeTypeTests","Diff/LCS/ChangeTypeTests.html#method-i-finished_b-3F","()",""],["flush_lir_buffer","Attendee::Textwriter","Attendee/Textwriter.html#method-i-flush_lir_buffer","()",""],["forward","Attendee","Attendee.html#method-i-forward","(obj, param=nil)",""],["forward_buffer","BufferedAttendee","BufferedAttendee.html#method-i-forward_buffer","()",""],["forward_number_of_token","Attendee::Dehyphenizer","Attendee/Dehyphenizer.html#method-i-forward_number_of_token","( len, count_punc = true )","<p>Leitet ‘len’ Token weiter\n"],["forward_number_of_token","Attendee::Multiworder","Attendee/Multiworder.html#method-i-forward_number_of_token","( len, count_punc = true )","<p>Leitet ‘len’ Token weiter\n"],["from_a","Diff::LCS::Change","Diff/LCS/Change.html#method-c-from_a","(arr)",""],["from_a","Diff::LCS::ContextChange","Diff/LCS/ContextChange.html#method-c-from_a","(arr)","<p>Creates a ContextChange from an array produced by ContextChange#to_a.\n"],["from_x","String","String.html#method-i-from_x","()",""],["get","Reportable","Reportable.html#method-i-get","(counter)",""],["get_array","Attendee","Attendee.html#method-i-get_array","(key, default=nil)",""],["get_class","Word","Word.html#method-i-get_class","(wc_re)","<p>Gibt genau die Grundform der Wortklasse zurück, die der RegExp des\nÜbergabe-Parameters  entspricht,  …\n"],["get_key","Attendee","Attendee.html#method-i-get_key","(key, default=nil)",""],["has_key?","Attendee","Attendee.html#method-i-has_key-3F","(key)","\n<pre>Konfigurationshilfsmethoden</pre>\n"],["hash","StringA","StringA.html#method-i-hash","()",""],["hit?","Cachable","Cachable.html#method-i-hit-3F","(key)",""],["inc","Reportable","Reportable.html#method-i-inc","(counter)",""],["inc","ShowPercent","ShowPercent.html#method-i-inc","(increment)",""],["infix_lexicals","Dictionary","Dictionary.html#method-i-infix_lexicals","(string)","<p><em>dic</em>.gap_lexicals( <em>aString</em> ) -&gt;\n<em>ArrayOfLexicals</em>\n<p>Gibt alle möglichen Lexicals zurück, die von der Endung …\n"],["init","Attendee::Abbreviator","Attendee/Abbreviator.html#method-i-init","()",""],["init","Attendee::Debugger","Attendee/Debugger.html#method-i-init","()",""],["init","Attendee::Decomposer","Attendee/Decomposer.html#method-i-init","()",""],["init","Attendee::Dehyphenizer","Attendee/Dehyphenizer.html#method-i-init","()",""],["init","Attendee::Formatter","Attendee/Formatter.html#method-i-init","()",""],["init","Attendee::Helper","Attendee/Helper.html#method-i-init","()",""],["init","Attendee::Multiworder","Attendee/Multiworder.html#method-i-init","()",""],["init","Attendee::Noneword_filter","Attendee/Noneword_filter.html#method-i-init","()",""],["init","Attendee::Objectfilter","Attendee/Objectfilter.html#method-i-init","()",""],["init","Attendee::Sequencer","Attendee/Sequencer.html#method-i-init","()",""],["init","Attendee::Synonymer","Attendee/Synonymer.html#method-i-init","()",""],["init","Attendee::Textreader","Attendee/Textreader.html#method-i-init","()","\n<pre>TODO: FILE und LIR-FILE</pre>\n<p>TODO: lir-record-pattern abkürzen Interpretation der Parameter\n"],["init","Attendee::Textwriter","Attendee/Textwriter.html#method-i-init","()",""],["init","Attendee::Tokenizer","Attendee/Tokenizer.html#method-i-init","()",""],["init","Attendee::Variator","Attendee/Variator.html#method-i-init","()",""],["init","Attendee::Vector_filter","Attendee/Vector_filter.html#method-i-init","()",""],["init","Attendee::Wordsearcher","Attendee/Wordsearcher.html#method-i-init","()",""],["init_cachable","Cachable","Cachable.html#method-i-init_cachable","()",""],["init_reportable","Reportable","Reportable.html#method-i-init_reportable","()",""],["inspect","AgendaItem","AgendaItem.html#method-i-inspect","()",""],["inspect","Diff::LCS::ContextChange","Diff/LCS/ContextChange.html#method-i-inspect","(*args)",""],["inspect","StringA","StringA.html#method-i-inspect","()",""],["invite","Meeting","Meeting.html#method-i-invite","( invitation_list )","<p>Einladen aller Teilnehmer\n"],["is_valid?","Grammar","Grammar.html#method-i-is_valid-3F","(string, stats, lexis, seqs)",""],["key_to_nodes","LingoConfig","LingoConfig.html#method-i-key_to_nodes","(key)",""],["lcs","Diff::LCS","Diff/LCS.html#method-i-lcs","(other, &block)","<p>Returns an Array containing the longest common subsequence(s) between\n<code>self</code> and <code>other</code>. See Diff::LCS# …\n"],["lexicals","Word","Word.html#method-i-lexicals","(compound_parts = true)",""],["lexicals=","Word","Word.html#method-i-lexicals-3D","(lexis)",""],["listen","Attendee","Attendee.html#method-i-listen","(obj)",""],["load_yaml_file","LingoConfig","LingoConfig.html#method-i-load_yaml_file","(name, ext)",""],["match","Diff::LCS::DefaultCallbacks","Diff/LCS/DefaultCallbacks.html#method-c-match","(event)","<p>Called when two items match.\n"],["match","Diff::LCS::DefaultCallbacks","Diff/LCS/DefaultCallbacks.html#method-c-match","(event)","<p>Called when two items match.\n"],["match","Diff::LCS::DefaultCallbacks","Diff/LCS/DefaultCallbacks.html#method-c-match","(event)","<p>Called when two items match.\n"],["match","Diff::LCS::DiffCallbacks","Diff/LCS/DiffCallbacks.html#method-i-match","(event)",""],["match","Diff::LCS::SDiffCallbacks","Diff/LCS/SDiffCallbacks.html#method-i-match","(event)",""],["min_part_size","Word","Word.html#method-i-min_part_size","()",""],["move_to_next_line_and_show_text","Attendee::Textreader::PDFFilter","Attendee/Textreader/PDFFilter.html#method-i-move_to_next_line_and_show_text","(string, *params)",""],["new","AgendaItem","AgendaItem.html#method-c-new","(cmd, param='')",""],["new","Attendee","Attendee.html#method-c-new","(config)",""],["new","Attendee::Textreader::PDFFilter","Attendee/Textreader/PDFFilter.html#method-c-new","(&block)",""],["new","BufferedAttendee","BufferedAttendee.html#method-c-new","(config)",""],["new","DbmFile","DbmFile.html#method-c-new","(id, read_mode = true)",""],["new","Dictionary","Dictionary.html#method-c-new","(config, dictionary_config)",""],["new","Diff::LCS::Block","Diff/LCS/Block.html#method-c-new","(chunk)",""],["new","Diff::LCS::Change","Diff/LCS/Change.html#method-c-new","(action, position, element)",""],["new","Diff::LCS::ContextChange","Diff/LCS/ContextChange.html#method-c-new","(action, old_position, old_element, new_position, new_element)",""],["new","Diff::LCS::DiffCallbacks","Diff/LCS/DiffCallbacks.html#method-c-new","()",""],["new","Diff::LCS::Hunk","Diff/LCS/Hunk.html#method-c-new","(data_old, data_new, piece, context, file_length_difference)","<p>Create a hunk using references to both the old and new data, as well as the\npiece of data\n"],["new","Diff::LCS::SDiffCallbacks","Diff/LCS/SDiffCallbacks.html#method-c-new","()",""],["new","Grammar","Grammar.html#method-c-new","(config, dictionary_config)","<p>initialize(config, dictionary_config) -&gt; <em>Grammar</em> config =\nAttendee-spezifische Parameter  dictionary_config …\n"],["new","LexicalHash","LexicalHash.html#method-c-new","( id )",""],["new","LingoConfig","LingoConfig.html#method-c-new","(prog = $0, cmdline = $*)",""],["new","Meeting","Meeting.html#method-c-new","()","<p>Meeting initialisieren\n"],["new","ShowPercent","ShowPercent.html#method-c-new","(verbose = true)",""],["new","StringA","StringA.html#method-c-new","(form, attr='-')",""],["new","Txt2DbmConverter","Txt2DbmConverter.html#method-c-new","(id, verbose = true)",""],["new","TxtFile","TxtFile.html#method-c-new","(id)",""],["new","TxtFile_Keyvalue","TxtFile_Keyvalue.html#method-c-new","(id)",""],["new","TxtFile_Multikey","TxtFile_Multikey.html#method-c-new","(id)",""],["new","TxtFile_Multivalue","TxtFile_Multivalue.html#method-c-new","(id)",""],["new","TxtFile_Singleword","TxtFile_Singleword.html#method-c-new","(id)",""],["new","TxtFile_Wordclass","TxtFile_Wordclass.html#method-c-new","(id)",""],["new","Word","Word.html#method-c-new","(form, attr=WA_UNSET)","<p>Ergebnis der Wörterbuch-Suche. Sie stellt die Grundform des Wortes dar.\nDabei kann es mehrere mögliche …\n"],["new","WordSequence","WordSequence.html#method-c-new","(wordclasses, format)",""],["new_lexical","Word","Word.html#method-c-new_lexical","(form, attr, lex_attr)",""],["nodes_to_key","LingoConfig","LingoConfig.html#method-i-nodes_to_key","(nodes)",""],["norm","Word","Word.html#method-i-norm","()",""],["number_of_valid_tokens_in_buffer","Attendee::Dehyphenizer","Attendee/Dehyphenizer.html#method-i-number_of_valid_tokens_in_buffer","()","<p>Liefert die Anzahl gültiger Token zurück\n"],["number_of_valid_tokens_in_buffer","Attendee::Multiworder","Attendee/Multiworder.html#method-i-number_of_valid_tokens_in_buffer","()","<p>Liefert die Anzahl gültiger Token zurück\n"],["old_diff","Diff::LCS::Hunk","Diff/LCS/Hunk.html#method-i-old_diff","()","<p>Note that an old diff can’t have any context. Therefore, we know that\nthere’s only one block in the hunk. …\n"],["old_downcase","String","String.html#method-i-old_downcase","()",""],["old_split","String","String.html#method-i-old_split","(*par)",""],["op","Diff::LCS::Block","Diff/LCS/Block.html#method-i-op","()",""],["open","DbmFile","DbmFile.html#method-i-open","()",""],["open","DbmFile","DbmFile.html#method-c-open","(*args)",""],["open","File","File.html#method-c-open","(*args, &block)",""],["overlaps?","Diff::LCS::Hunk","Diff/LCS/Hunk.html#method-i-overlaps-3F","(hunk = nil)","<p>Is there an overlap between hunk arg0 and old hunk arg1? Note: if end of\nold hunk is one less than beginning …\n"],["parse_cmdline","LingoConfig","LingoConfig.html#method-i-parse_cmdline","(cmdline)",""],["parts","Word","Word.html#method-i-parts","()","<p>für Compositum\n"],["patch","Diff::LCS","Diff/LCS.html#method-c-patch","(src, patchset, direction = nil)","<p>Given a patchset, convert the current version to the new version. If\n<code>direction</code> is not specified (must …\n"],["patch","Diff::LCS","Diff/LCS.html#method-i-patch","(patchset)","<p>Attempts to patch a copy of <code>self</code> with the provided\n<code>patchset</code>. See Diff::LCS#patch.\n"],["patch!","Diff::LCS","Diff/LCS.html#method-i-patch-21","(patchset)","<p>Attempts to patch <code>self</code> with the provided\n<code>patchset</code>. See Diff::LCS#patch!. Does no autodiscovery.\n"],["patch!","Diff::LCS","Diff/LCS.html#method-c-patch-21","(src, patchset)","<p>Given a set of patchset, convert the current version to the next version.\nDoes no auto-discovery.\n"],["patch_keys","LingoConfig","LingoConfig.html#method-i-patch_keys","(cont)",""],["permute_compositum","Grammar","Grammar.html#method-i-permute_compositum","(string, level, has_tail)","<p>permute_string( <em>aString</em> ) -&gt;  [lexicals, stats, seqs]\n"],["process","Attendee::Debugger","Attendee/Debugger.html#method-i-process","(obj)",""],["process","Attendee::Decomposer","Attendee/Decomposer.html#method-i-process","(obj)",""],["process","Attendee::Formatter","Attendee/Formatter.html#method-i-process","(obj)",""],["process","Attendee::Helper","Attendee/Helper.html#method-i-process","(obj)",""],["process","Attendee::Noneword_filter","Attendee/Noneword_filter.html#method-i-process","(obj)",""],["process","Attendee::Objectfilter","Attendee/Objectfilter.html#method-i-process","(obj)",""],["process","Attendee::Synonymer","Attendee/Synonymer.html#method-i-process","(obj)",""],["process","Attendee::Textwriter","Attendee/Textwriter.html#method-i-process","(obj)",""],["process","Attendee::Tokenizer","Attendee/Tokenizer.html#method-i-process","(obj)",""],["process","Attendee::Variator","Attendee/Variator.html#method-i-process","(obj)",""],["process","Attendee::Vector_filter","Attendee/Vector_filter.html#method-i-process","(obj)",""],["process","Attendee::Wordsearcher","Attendee/Wordsearcher.html#method-i-process","(obj)",""],["process","BufferedAttendee","BufferedAttendee.html#method-i-process","(obj)",""],["process_buffer","Attendee::Abbreviator","Attendee/Abbreviator.html#method-i-process_buffer","()",""],["process_buffer","Attendee::Dehyphenizer","Attendee/Dehyphenizer.html#method-i-process_buffer","()",""],["process_buffer","Attendee::Multiworder","Attendee/Multiworder.html#method-i-process_buffer","()",""],["process_buffer","Attendee::Sequencer","Attendee/Sequencer.html#method-i-process_buffer","()",""],["process_buffer","BufferedAttendee","BufferedAttendee.html#method-i-process_buffer","()",""],["process_buffer?","Attendee::Abbreviator","Attendee/Abbreviator.html#method-i-process_buffer-3F","()",""],["process_buffer?","Attendee::Dehyphenizer","Attendee/Dehyphenizer.html#method-i-process_buffer-3F","()",""],["process_buffer?","Attendee::Multiworder","Attendee/Multiworder.html#method-i-process_buffer-3F","()",""],["process_buffer?","Attendee::Sequencer","Attendee/Sequencer.html#method-i-process_buffer-3F","()",""],["process_buffer?","BufferedAttendee","BufferedAttendee.html#method-i-process_buffer-3F","()",""],["report","Dictionary","Dictionary.html#method-i-report","()",""],["report","Grammar","Grammar.html#method-i-report","()",""],["report","Reportable","Reportable.html#method-i-report","()",""],["report_dictionary","Dictionary","Dictionary.html#method-i-report_dictionary","()",""],["report_grammar","Grammar","Grammar.html#method-i-report_grammar","()",""],["report_prefix","Reportable","Reportable.html#method-i-report_prefix","(prefix)",""],["reset","Meeting","Meeting.html#method-i-reset","()",""],["retrieve","Cachable","Cachable.html#method-i-retrieve","(key)",""],["scan","WordSequence","WordSequence.html#method-i-scan","(sequence)",""],["sdiff","Diff::LCS","Diff/LCS.html#method-i-sdiff","(other, callbacks = nil, &block)","<p>Returns the balanced (“side-by-side”) difference set between\n<code>self</code> and <code>other</code>. See Diff::LCS#sdiff …\n"],["sdiff","Diff::LCS","Diff/LCS.html#method-c-sdiff","(seq1, seq2, callbacks = nil, &block)","<p>Diff::LCS.sdiff computes all necessary components to show two sequences and\ntheir minimized differences …\n"],["select","Dictionary","Dictionary.html#method-i-select","(string)","<p><em>dic</em>.select( <em>aString</em> ) -&gt; <em>ArrayOfLexicals</em>\n<p>Sucht alle Wörterbücher durch und gibt den ersten Treffer …\n"],["select_with_infix","Dictionary","Dictionary.html#method-i-select_with_infix","(string)","<p><em>dic</em>.select_with_infix( <em>aString</em> ) -&gt;\n<em>ArrayOfLexicals</em>\n<p>Sucht alle Wörterbücher durch und gibt den ersten …\n"],["select_with_suffix","Dictionary","Dictionary.html#method-i-select_with_suffix","(string)","<p><em>dic</em>.select_with_suffix( <em>aString</em> ) -&gt;\n<em>ArrayOfLexicals</em>\n<p>Sucht alle Wörterbücher durch und gibt den ersten …\n"],["sendVector","Attendee::Vector_filter","Attendee/Vector_filter.html#method-i-sendVector","()",""],["sequences","Attendee::Sequencer","Attendee/Sequencer.html#method-i-sequences","(map)",""],["set","Reportable","Reportable.html#method-i-set","(counter, value)",""],["set","ShowPercent","ShowPercent.html#method-i-set","(absolute)",""],["set_encoding","IO","IO.html#method-i-set_encoding","(*args)",""],["set_source_file","DbmFile","DbmFile.html#method-i-set_source_file","(filename)",""],["set_spacing_next_line_show_text","Attendee::Textreader::PDFFilter","Attendee/Textreader/PDFFilter.html#method-i-set_spacing_next_line_show_text","(string, *params)",""],["show","ShowPercent","ShowPercent.html#method-i-show","()",""],["show?","ShowPercent","ShowPercent.html#method-i-show-3F","()",""],["show_text","Attendee::Textreader::PDFFilter","Attendee/Textreader/PDFFilter.html#method-i-show_text","(string, *params)",""],["show_text_with_positioning","Attendee::Textreader::PDFFilter","Attendee/Textreader/PDFFilter.html#method-i-show_text_with_positioning","(params, *)",""],["simplify","Diff::LCS::ContextChange","Diff/LCS/ContextChange.html#method-c-simplify","(event)","<p>Simplifies a context change for use in some diff callbacks. ‘&lt;’ actions\nare converted to ‘-’ and ‘&gt;’ …\n"],["size","TxtFile","TxtFile.html#method-i-size","()",""],["sort_result_len","Attendee::Multiworder","Attendee/Multiworder.html#method-i-sort_result_len","( result )","<p>Ermittelt die maximale Ergebnislänge\n"],["split","String","String.html#method-i-split","(*par)","<p><em>str</em>.split( <em>anInteger</em> ) -&gt; <em>anArray</em>\n<p>Die Methode split wird um eine Aufruf-Variante erweitert, z.B.\n<p><code>&quot;Wortklasse&quot;.split(4)</code> ...\n"],["spool","Attendee::Textreader","Attendee/Textreader.html#method-i-spool","(filename)","<p>Gibt eine Datei zeilenweise in den Ausgabekanal\n"],["start","Meeting","Meeting.html#method-i-start","( protocol )","<p>&gt; protocol = 0   keep quiet, i.e. for testing\n<p>&gt; protocol = 1   report status\n<p>&gt; protocol = 2   …\n"],["start","ShowPercent","ShowPercent.html#method-i-start","(max)",""],["stdin?","Attendee::Textreader","Attendee/Textreader.html#method-i-stdin-3F","(filename)",""],["stdout?","Attendee::Textwriter","Attendee/Textwriter.html#method-i-stdout-3F","(filename)",""],["stop","ShowPercent","ShowPercent.html#method-i-stop","()",""],["store","Cachable","Cachable.html#method-i-store","(key, value)",""],["suffix_lexicals","Dictionary","Dictionary.html#method-i-suffix_lexicals","(string)","<p><em>dic</em>.suffix_lexicals( <em>aString</em> ) -&gt;\n<em>ArrayOfLexicals</em>\n<p>Gibt alle möglichen Lexicals zurück, die von der …\n"],["super_show_text","Attendee::Textreader::PDFFilter","Attendee/Textreader/PDFFilter.html#method-i-super_show_text","(string, *params)",""],["talk","Attendee","Attendee.html#method-i-talk","(obj)",""],["test_compositum","Grammar","Grammar.html#method-i-test_compositum","(front_string, infix, back_string, level, has_tail)","<p>test_compositum() -&gt;  [stats, lexicals, seq]\n<p>Testet einen definiert zerlegten String auf Kompositum …\n"],["to_a","Diff::LCS::Change","Diff/LCS/Change.html#method-i-to_a","()","<p>Creates a Change from an array produced by Change#to_a.\n"],["to_a","Diff::LCS::ContextChange","Diff/LCS/ContextChange.html#method-i-to_a","()",""],["to_a","Lexical","Lexical.html#method-i-to_a","()","<p>v TODO: v1.5.1\n"],["to_a","Lingo::Version","Lingo/Version.html#method-c-to_a","()","<p>Returns array representation.\n"],["to_h","DbmFile","DbmFile.html#method-i-to_h","()",""],["to_s","Lexical","Lexical.html#method-i-to_s","()","<p>v\n"],["to_s","Lingo::Version","Lingo/Version.html#method-c-to_s","()","<p>Short-cut for version string.\n"],["to_s","StringA","StringA.html#method-i-to_s","()",""],["to_s","Token","Token.html#method-i-to_s","()",""],["to_s","Word","Word.html#method-i-to_s","()",""],["to_str","Lexical","Lexical.html#method-i-to_str","()",""],["to_x","String","String.html#method-i-to_x","()",""],["tokenize","Attendee::Tokenizer","Attendee/Tokenizer.html#method-i-tokenize","(textline)","<p>tokenize(“Eine Zeile.”)  -&gt;  [:Eine/WORD:, :Zeile/WORD:, :./PUNC:]\n"],["traverse_balanced","Diff::LCS","Diff/LCS.html#method-i-traverse_balanced","(other, callbacks = nil, &block)","<p>Traverses the discovered longest common subsequences between\n<code>self</code> and <code>other</code> using the alternate, balanced …\n"],["traverse_balanced","Diff::LCS","Diff/LCS.html#method-c-traverse_balanced","(seq1, seq2, callbacks = Diff::LCS::BalancedCallbacks)","<p>#traverse_balanced is an alternative to #traverse_sequences. It uses a\ndifferent algorithm to iterate …\n"],["traverse_sequences","Diff::LCS","Diff/LCS.html#method-i-traverse_sequences","(other, callbacks = nil, &block)","<p>Traverses the discovered longest common subsequences between\n<code>self</code> and <code>other</code>. See Diff::LCS#traverse_sequences\n…\n"],["traverse_sequences","Diff::LCS","Diff/LCS.html#method-c-traverse_sequences","(seq1, seq2, callbacks = Diff::LCS::SequenceCallbacks, &block)","<p>Diff::LCS.traverse_sequences is the most general facility provided by this\nmodule; <code>diff</code> and <code>LCS</code> are implemented …\n"],["unchanged?","Diff::LCS::ChangeTypeTests","Diff/LCS/ChangeTypeTests.html#method-i-unchanged-3F","()",""],["unified_diff","Diff::LCS::Hunk","Diff/LCS/Hunk.html#method-i-unified_diff","()",""],["unified_range","Diff::LCS::Hunk","Diff/LCS/Hunk.html#method-i-unified_range","(mode)","<p>Generate a range of item numbers to print for unified diff. Print number\nwhere block starts, followed …\n"],["unknown?","Word","Word.html#method-i-unknown-3F","()",""],["unpatch","Diff::LCS","Diff/LCS.html#method-i-unpatch","(patchset)","<p>Attempts to unpatch a copy of <code>self</code> with the provided\n<code>patchset</code>. See Diff::LCS#patch.\n"],["unpatch!","Diff::LCS","Diff/LCS.html#method-i-unpatch-21","(patchset)","<p>Attempts to unpatch <code>self</code> with the provided\n<code>patchset</code>. See Diff::LCS#unpatch. Does no autodiscovery.\n"],["unpatch!","Diff::LCS","Diff/LCS.html#method-c-unpatch-21","(src, patchset)","<p>Given a set of patchset, convert the current version to the prior version.\nDoes no auto-discovery.\n"],["unshift","Diff::LCS::Hunk","Diff/LCS/Hunk.html#method-i-unshift","(hunk)",""],["uptodate?","DbmFile","DbmFile.html#method-i-uptodate-3F","()","<p>Überprüft die Aktualität des DbmFile\n"],["usage","LingoConfig","LingoConfig.html#method-i-usage","(text)",""],["variate","Attendee::Variator","Attendee/Variator.html#method-i-variate","(variation_list, from, to)","<p>Variiere die Bestandteile eines Arrays gemäß den Austauschvorgaben.\n<p>variate( ‘Tiieh’, ‘ieh’, ‘sch’ ) =&gt; …\n"],["COPYING","","COPYING.html","","\n<pre>                   GNU AFFERO GENERAL PUBLIC LICENSE\n                      Version 3, 19 November 2007 ...</pre>\n"],["ChangeLog","","ChangeLog.html","","<p>Revision history for lingo\n<p>1.7.1 [2011-10-24]\n<p>Multiworder actually finds the <strong>longest</strong> matching multiword\n…\n"],["README","","README.html","","<p>Lingo - A full-featured automatic indexing system\n<p>Lingo is an open source indexing system for research …\n"]]}}