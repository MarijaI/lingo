#
#  Lingo-Konfiguration für den Test mit einer LIR-Datei
#
#  Gebräuchliche Patterns sind
#  "^\021(\d+\-\d+)\022"
#  "^\[(\d+)\.\]"
#
---
meeting:

  attendees:

    ########################################
    #  Text bereitstellen
    #

    #  Angegebene Datei zeilenweise einlesen und verarbeiten
    -  textreader:      { files: '$(files)', lir-record-pattern: '^\[(\d+)\.\]' }


    ########################################
    #  Inhalte verarbeiten
    #

    #  Zeile in einzelnen Sinnbestandteile (Token) zerlegen
    -  tokenizer:       { }

    #  Verbleibende Token im Wörterbuch suchen
    -  wordsearcher:    { source: 'sys-dic', mode: 'first' }

    #  Nicht erkannte Wörter auf Kompositum testen
    -  decomposer:      { source: 'sys-dic' }

    #  Mehrwortgruppen im Strom erkennen
    -  multiworder:     { stopper: 'PUNC,OTHR', source: 'sys-mul' }

    #  Wortsequenzen anhand von Regeln identifizieren
    -  sequencer:       { stopper: 'PUNC,OTHR' }

    #  Relationierungen einfügen
    -  synonymer:       { skip: '?,t', source: 'sys-syn', out: syn }


    ########################################
    #  Datenstrom anzeigen
    #
    -  debugger:        { eval: 'true', ceval: 'cmd!="EOL"', prompt: 'lex:) ' }


    ########################################
    #  Ergebnisse ausgeben
    #

    #  Erstelle Datei mit Endung .non für nicht erkannte Wörter
    -  noneword_filter: { in: syn }
    -  textwriter:      { ext: non }

    #  Erstelle Datei mit Endung .csv für erkannte Indexterme
    -  vector_filter:   { in: syn, lexicals: '^[ksavem]$' }
    -  textwriter:      { ext: csv }

    #  Erstelle Datei mit Endung .mul für erkannte Mehrwortgruppen
    -  vector_filter:   { in: syn, lexicals: m }
    -  textwriter:      { ext: mul }

    #  Erstelle Datei mit Endung .seq für erkannte Wortsequenzen
    -  vector_filter:   { in: syn, lexicals: q, sort: 'term_abs' }
    -  textwriter:      { ext: seq }

    #  Erstelle Datei mit Endung .syn für erkannte Synonyme
    -  vector_filter:   { in: syn, lexicals: y, sort: 'term_abs' }
    -  textwriter:      { ext: syn }
